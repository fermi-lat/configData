//  -*- Mode: c -*-
//---------------------------------------------------------------------------
// File and Version Information:
//      $Id: fsw_schema.cxx,v 1.1 2008/03/27 00:30:43 echarles Exp $
//
// Description:
//      Base class for converting FSW headers to XML
//
// Environment:
//      Software developed for GLAST.
//
// Author List:
//      Eric Charles
//
// Copyright Information:
//      Copyright (C) 2008      Stanford Linear Accelerator Center
//
//---------------------------------------------------------------------------


// base class headers
#include "./fsw_datum.h"

// c++/stl headers
#include <map>
#include <iostream>
#include <iomanip>
#include <fstream>


// Local headers
#include "configData/base/ConfigXmlUtil.h"

// FSW headers
#include "fsw/GFC_DB/GFC_DB_schema.h"
#include "fsw/XFC_DB/HFC_DB_schema.h"
#include "fsw/XFC_DB/MFC_DB_schema.h"
#include "fsw/XFC_DB/DFC_DB_schema.h"


namespace configData {

  // Specializations  
  
  template <>
  fsw_datum_inst<EFC_DB_prescalers>::fsw_datum_inst(const char* name, EFC_DB_prescalers& val)
    :fsw_datum(name),
     m_datum(val){
    addChild( *(new fsw_datum_uint("Input_Prescale",val.in) ) );
    addChild( *(new fsw_datum_uint("Output_Prescale",val.out) ) );
  }

  template <>
  fsw_datum_inst<EFC_DB_sampler>::fsw_datum_inst(const char* name, EFC_DB_sampler& val)
    :fsw_datum(name),
     m_datum(val){
    addChild( *(new fsw_datum_mask("Enabled",val.enabled) ) );
    addChild( *(new fsw_datum_inst<EFC_DB_prescalers>("Prescalers",val.prescalers) ) );
  }
    
  template <>
  fsw_datum_inst<DFC_DB_gemV0>::fsw_datum_inst(const char* name, DFC_DB_gemV0& val)
    :fsw_datum(name),
     m_datum(val){
  }

  template <>
  fsw_datum_inst<DFC_DB_stats>::fsw_datum_inst(const char* name, DFC_DB_stats& val)
    :fsw_datum(name),
     m_datum(val){
  }

  template <>
  fsw_datum_inst<DFC_DB_prms>::fsw_datum_inst(const char* name, DFC_DB_prms& val)
    :fsw_datum(name),
     m_datum(val){
    addChild( *(new fsw_datum_inst<DFC_DB_gemV0>("DFC_GEM_map",val.gem) ) );
    addChild( *(new fsw_datum_inst<DFC_DB_stats>("DFC_Statistics",val.stats) ) );
  }

  template <>
  fsw_datum_inst<MFC_DB_calV0>::fsw_datum_inst(const char* name, MFC_DB_calV0& val)
    :fsw_datum(name),
     m_datum(val){
    addChild( *(new fsw_datum_uint("Energy_low" ,val.elo) ) );    
    addChild( *(new fsw_datum_uint("Energy_high",val.ehi) ) );    
    addChild( *(new fsw_datum_uint("nlayers"    ,val.nlayers) ) );    
  }

  template <>
  fsw_datum_inst<MFC_DB_tkrV0>::fsw_datum_inst(const char* name, MFC_DB_tkrV0& val)
    :fsw_datum(name),
     m_datum(val){
    addChild( *(new fsw_datum_uint("placeholder",val.placeholder) ) );   
  }

  template <>
  fsw_datum_inst<MFC_DB_prms>::fsw_datum_inst(const char* name, MFC_DB_prms& val)
    :fsw_datum(name),
     m_datum(val){
    addChild( *(new fsw_datum_inst<MFC_DB_calV0>("MFC_CAL",val.cal) ) );
    addChild( *(new fsw_datum_inst<MFC_DB_tkrV0>("MFC_TKR",val.tkr) ) );  
  }

  template <>
  fsw_datum_inst<HFC_DB_acdV0>::fsw_datum_inst(const char* name, HFC_DB_acdV0& val)
    :fsw_datum(name),
     m_datum(val){
    addChild( *(new fsw_datum_uint("placeholder",val.placeholder) ) ); 
  }

  template <>
  fsw_datum_inst<HFC_DB_calV0>::fsw_datum_inst(const char* name, HFC_DB_calV0& val)
    :fsw_datum(name),
     m_datum(val){
    addChild( *(new fsw_datum_uint("Energy_Threshold" ,val.ethreshold) ) );    
    addChild( *(new fsw_datum_uint("n_Max_Logs"       ,val.nmaxlogs) ) );    
    addChild( *(new fsw_datum_uint("Tolerance"        ,val.tolerance) ) );        
  }

  template <>
  fsw_datum_inst<HFC_DB_tkrV0>::fsw_datum_inst(const char* name, HFC_DB_tkrV0& val)
    :fsw_datum(name),
     m_datum(val){
    addChild( *(new fsw_datum_uint("placeholder",val.placeholder) ) ); 
  }

  template <>
  fsw_datum_inst<HFC_DB_prms>::fsw_datum_inst(const char* name, HFC_DB_prms& val)
    :fsw_datum(name),
     m_datum(val){
    addChild( *(new fsw_datum_inst<HFC_DB_acdV0>("HFC_ACD",val.acd) ) );
    addChild( *(new fsw_datum_inst<HFC_DB_calV0>("HFC_CAL",val.cal) ) );  
    addChild( *(new fsw_datum_inst<HFC_DB_tkrV0>("HFC_TKR",val.tkr) ) );  
  }

  template <>
  fsw_datum_inst<GFC_DB_acdV0>::fsw_datum_inst(const char* name, GFC_DB_acdV0& val)
    :fsw_datum(name),
     m_datum(val){
    addChild( *(new fsw_datum_uint("TopSide_EnergyMax"       ,val.topSideEmax) ) );    
    addChild( *(new fsw_datum_uint("TopSideFilter_EnergyMax" ,val.topSideFilterEmax) ) );    
    addChild( *(new fsw_datum_uint("Splash_EnergyMax"        ,val.splashEmax) ) );        
    addChild( *(new fsw_datum_uint("Splash_Count"            ,val.splashCount) ) );    
    addChild( *(new fsw_datum_ptr("Splash_Map"               ,(void*)val.splashMap) ) );        
  }

  template <>
  fsw_datum_inst<GFC_DB_atfV0>::fsw_datum_inst(const char* name, GFC_DB_atfV0& val)
    :fsw_datum(name),
     m_datum(val){
    addChild( *(new fsw_datum_uint("Energy_Max" ,val.emax) ) );    
    addChild( *(new fsw_datum_ptr("Shadowed_Map",(void*)val.shadowed) ) );            
  }

  template <>
  fsw_datum_inst<GFC_DB_zbottomV0>::fsw_datum_inst(const char* name, GFC_DB_zbottomV0& val)
    :fsw_datum(name),
     m_datum(val){
    addChild( *(new fsw_datum_uint("Energy_Min" ,val.emin) ) );    
  }

  template <>
  fsw_datum_inst<GFC_DB_calV1>::fsw_datum_inst(const char* name, GFC_DB_calV1& val)
    :fsw_datum(name),
     m_datum(val){
    addChild( *(new fsw_datum_uint("Energy_Pass"       ,val.epass) ) );    
    addChild( *(new fsw_datum_uint("Energy_Min"        ,val.emin) ) );    
    addChild( *(new fsw_datum_uint("Energy_Max"        ,val.emax) ) );        
    addChild( *(new fsw_datum_uint("Layer0_RatioLow"   ,val.layer0RatioLo) ) );    
    addChild( *(new fsw_datum_uint("Layer0_RatioHigh"  ,val.layer0RatioHi) ) );    
  }

  template <>
  fsw_datum_inst<GFC_DB_tkrV0>::fsw_datum_inst(const char* name, GFC_DB_tkrV0& val)
    :fsw_datum(name),
     m_datum(val){
    addChild( *(new fsw_datum_uint("Row2_Energy_Max"       ,val.row2Emax) ) );    
    addChild( *(new fsw_datum_uint("Row1_Energy_Max"       ,val.row01Emax) ) );    
    addChild( *(new fsw_datum_uint("Top_Energy_Max"        ,val.topEmax) ) );        
    addChild( *(new fsw_datum_uint("Zero_Track_Energy_Min" ,val.zeroTkrEmin) ) );    
    addChild( *(new fsw_datum_uint("Two_Track_Energy_Max"  ,val.twoTkrEmax) ) );    
    addChild( *(new fsw_datum_uint("Skirt_Energy_Max"      ,val.skirtEmax) ) );    
  }

  template <>
  fsw_datum_inst<GFC_DB_prms>::fsw_datum_inst(const char* name, GFC_DB_prms& val)
    :fsw_datum(name),
     m_datum(val){
    addChild( *(new fsw_datum_inst<GFC_DB_acdV0>("GFC_ACD",val.acd) ) );
    addChild( *(new fsw_datum_inst<GFC_DB_atfV0>("GFC_ATF",val.atf) ) );
    addChild( *(new fsw_datum_inst<GFC_DB_zbottomV0>("GFC_ZBottom",val.zbottom) ) );
    addChild( *(new fsw_datum_inst<GFC_DB_calV1>("GFC_CAL",val.cal) ) );
    addChild( *(new fsw_datum_inst<GFC_DB_tkrV0>("GFC_TKR",val.tkr) ) );  
  }

  template <>
  fsw_datum_inst<GFC_DB_schema>::fsw_datum_inst(const char* name, GFC_DB_schema& val)
    :fsw_datum(name),
     m_datum(val){   
    addChild( *(new fsw_datum_inst<EFC_DB_sampler>("EFC_Sampler",val.sampler) ) );  
    addChild( *(new fsw_datum_inst<GFC_DB_prms>("GFC_Params",val.prms) ) );    
  }

  template <>
  fsw_datum_inst<HFC_DB_schema>::fsw_datum_inst(const char* name, HFC_DB_schema& val)
    :fsw_datum(name),
     m_datum(val){
    addChild( *(new fsw_datum_inst<EFC_DB_sampler>("EFC_Sampler",val.sampler) ) );  
    addChild( *(new fsw_datum_inst<HFC_DB_prms>("HFC_Params",val.prms) ) );    
  }

  template <>
  fsw_datum_inst<MFC_DB_schema>::fsw_datum_inst(const char* name, MFC_DB_schema& val)
    :fsw_datum(name),
     m_datum(val){
    addChild( *(new fsw_datum_inst<EFC_DB_sampler>("EFC_Sampler",val.sampler) ) );  
    addChild( *(new fsw_datum_inst<MFC_DB_prms>("MFC_Params",val.prms) ) );    
  }

  template <>
  fsw_datum_inst<DFC_DB_schema>::fsw_datum_inst(const char* name, DFC_DB_schema& val)
    :fsw_datum(name),
     m_datum(val){
    addChild( *(new fsw_datum_inst<EFC_DB_sampler>("EFC_Sampler",val.sampler) ) );  
    addChild( *(new fsw_datum_inst<DFC_DB_prms>("DFC_Params",val.prms) ) );    
  }



  template <>
  void fsw_datum_inst<EFC_DB_prescalers>::specializedPrint( int depth, std::ostream& os) const {
    os << std::setw(depth) << ' ' << get_name() << std::endl;
    for ( unsigned int i(0); i < 32; i++) {
      os << std::setw(depth) << ' ' 
	 << "  prescale"  << std::right
	 << std::setw(25-depth) << std::left << std::dec << i 
	 << ':' << m_datum.pv[i] << std::endl;
    }
  }
  
  template <>
  void fsw_datum_inst<DFC_DB_gemV0>::specializedPrint( int depth, std::ostream& os) const {
    os << std::setw(depth) << ' ' << get_name() << std::endl;
    os << std::setw(depth) << ' ' 
       <<  "     :  0 :  1 :  2 :  3 :  4 :  5 :  6 :  7 :  8 :  9 :  a :  b :  c :  d :  e :  f" 
       << std::endl;
    unsigned int idx(0);
    for ( unsigned int i(0); i < 16; i++) {
      os << std::setw(depth) << ' ' << "  " << std::hex << std::setw(1) << std::setfill('0') << i << "   ";
      for ( unsigned int j(0); j < 16; j++, idx++) {
	os << std::hex << std::setw(4) << std::setfill('0') << m_datum.map[idx] << " ";
      }
      os << std::endl;
    }
  }

  template <>
  void fsw_datum_inst<DFC_DB_stats>::specializedPrint( int depth, std::ostream& os) const {
     os << std::setw(depth) << ' ' << get_name() << std::endl;
     for ( unsigned int i(0); i < 33; i++) {
       os << std::setw(depth) << ' ' << "  " << std::dec << std::setw(2) << i << ' ';
       const unsigned char* title = m_datum.titles[i];
       	if ( title == 0 ) {
	  os << std::endl;
	} else {
	  os << title << std::endl;
	}
     }
  }

  
  // Write to XML
  template <>
  DOMElement* fsw_datum_inst<EFC_DB_prescalers>::specializedWriteToXml( DOMElement& parent ) const {
   DOMElement* thisNode = XmlUtil::makeChildNode( parent, get_name().c_str() );
   if ( thisNode == 0 ) return 0;
   for ( unsigned int i(0); i < 32; i++) {
     char tempName[20];
     sprintf(tempName,"Prescale_%02i",i);
     DOMElement* cNode = XmlUtil::makeChildNodeWithContent(*thisNode, tempName, m_datum.pv[i]);
     if ( cNode == 0 ) return 0;
   }
   return thisNode;
  }

  template <>
  DOMElement* fsw_datum_inst<DFC_DB_gemV0>::specializedWriteToXml( DOMElement& parent ) const {
    DOMElement* thisNode = XmlUtil::makeChildNode( parent, get_name().c_str() );
    if ( thisNode == 0 ) return 0;
    for ( unsigned int i(0); i < 256; i++) {
      char tempName[20];
      sprintf(tempName,"Map_%03i",i);
      char tempValue[8];
      sprintf(tempValue,"0x%04x",m_datum.map[i]);
      DOMElement* cNode = XmlUtil::makeChildNodeWithContent(*thisNode, tempName,tempValue);
      if ( cNode == 0 ) return 0;
    }
    return thisNode;
  }
  
  template <>
  DOMElement* fsw_datum_inst<DFC_DB_stats>::specializedWriteToXml( DOMElement& parent ) const {
    DOMElement* thisNode = XmlUtil::makeChildNode( parent, get_name().c_str() );
    if ( thisNode == 0 ) return 0;
    for ( unsigned int i(0); i < 33; i++) {
      char tempName[20];
      sprintf(tempName,"Title_%02i",i);
      char tempTitle[20];
      sprintf(tempTitle,"%s",m_datum.titles[i]);
      DOMElement* cNode = XmlUtil::makeChildNodeWithContent(*thisNode, tempName, tempTitle);
      if ( cNode == 0 ) return 0;
    }
    return thisNode;
  }

  
  // Read from XML
  template <>
  bool fsw_datum_inst<EFC_DB_prescalers>::specializedReadFromXml( DOMElement& thisNode ) {
    return true;
  }

  template <>
  bool fsw_datum_inst<DFC_DB_gemV0>::specializedReadFromXml( DOMElement& thisNode ) {
    return true;
  }

  template <>
  bool fsw_datum_inst<DFC_DB_stats>::specializedReadFromXml( DOMElement& thisNode ) {
    return true;
  }

}
